
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Hands-on wxPython &mdash; Hands-on wxPython</title>
    
    <link rel="stylesheet" href="_static/wxpython.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '',
        VERSION:     '2012.4',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="shortcut icon" href="_static/phoenix_small.ico"/>
    <link rel="top" title="Hands-on wxPython" href="index.html" />
    <link rel="prev" title="Welcome to PyCon Argentina 2012’s documentation!" href="index.html" /> 
  </head>
  <body>  

    <div class="document">
      <div class="documentwrapper">
          <div class="body">
            
  <div class="section" id="hands-on-wxpython">
<h1>Hands-on wxPython<a class="headerlink" href="#hands-on-wxpython" title="Permalink to this headline">¶</a></h1>
<h2 class="subtitle">Andrea Gavana - PythonBrasil8</h2><div class="contents local topic" id="contents">
<ul class="simple">
<li><a class="reference internal" href="#who-am-i" id="id29">Who Am I</a></li>
<li><a class="reference internal" href="#tutorial-description" id="id30">Descripción del Tutorial</a></li>
<li><a class="reference internal" href="#introduction" id="id31">Introduction</a><ul>
<li><a class="reference internal" href="#code-editors" id="id32">Code editors</a></li>
<li><a class="reference internal" href="#documentation" id="id33">Documentation</a></li>
</ul>
</li>
<li><a class="reference internal" href="#installation-and-configuration" id="id34">Installation and Configuration</a><ul>
<li><a class="reference internal" href="#windows-binaries" id="id35">Windows Binaries</a></li>
<li><a class="reference internal" href="#wxpython-demo-for-windows" id="id36">wxPython Demo for Windows</a></li>
<li><a class="reference internal" href="#mac-osx-binaries" id="id37">Mac OSX Binaries</a></li>
<li><a class="reference internal" href="#wxpython-demo-for-mac-osx" id="id38">wxPython Demo for Mac OSX</a></li>
<li><a class="reference internal" href="#linux-binaries" id="id39">Linux Binaries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#a-first-application" id="id40">A First Application</a><ul>
<li><a class="reference internal" href="#id1" id="id41">Hello World</a></li>
<li><a class="reference internal" href="#menubar-and-statusbar" id="id42">Menubar and statusbar</a></li>
<li><a class="reference internal" href="#event-handling" id="id43">Event handling</a></li>
<li><a class="reference internal" href="#adding-widgets" id="id44">Adding widgets</a></li>
</ul>
</li>
<li><a class="reference internal" href="#window-layout-management" id="id45">Window Layout Management</a><ul>
<li><a class="reference internal" href="#why-sizers" id="id46">Why sizers?</a></li>
<li><a class="reference internal" href="#the-idea-behind-sizers" id="id47">The idea behind sizers</a></li>
<li><a class="reference internal" href="#common-features" id="id48">Common features</a></li>
<li><a class="reference internal" href="#wx-sizers-the-visual-approach" id="id49"><cite>wx.Sizers</cite> - the visual approach</a><ul>
<li><a class="reference internal" href="#basic-way-of-adding-a-window" id="id50">Basic way of adding a window</a></li>
<li><a class="reference internal" href="#the-proportion-parameter" id="id51">The <cite>proportion</cite> parameter</a></li>
<li><a class="reference internal" href="#the-flags-and-border-parameters" id="id52">The <cite>flags</cite> and <cite>border</cite> parameters</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#fonts-colours-and-bitmaps" id="id53">Fonts, Colours and Bitmaps</a><ul>
<li><a class="reference internal" href="#wx-font" id="id54"><cite>wx.Font</cite></a></li>
<li><a class="reference internal" href="#wx-colour" id="id55"><cite>wx.Colour</cite></a></li>
<li><a class="reference internal" href="#wx-bitmap" id="id56"><cite>wx.Bitmap</cite></a></li>
</ul>
</li>
<li><a class="reference internal" href="#core-widgets" id="id57">Core Widgets</a><ul>
<li><a class="reference internal" href="#common-dialogs" id="id58">Common dialogs</a><ul>
<li><a class="reference internal" href="#id14" id="id59"><cite>wx.FileDialog</cite></a></li>
<li><a class="reference internal" href="#id16" id="id60"><cite>wx.MessageDialog</cite></a></li>
</ul>
</li>
<li><a class="reference internal" href="#common-widgets" id="id61">Common widgets</a><ul>
<li><a class="reference internal" href="#wx-notebook" id="id62"><cite>wx.Notebook</cite></a></li>
<li><a class="reference internal" href="#wx-splitterwindow" id="id63"><cite>wx.SplitterWindow</cite></a></li>
<li><a class="reference internal" href="#wx-treectrl" id="id64"><cite>wx.TreeCtrl</cite></a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#creating-custom-controls-basics" id="id65">Creating Custom Controls - Basics</a><ul>
<li><a class="reference internal" href="#device-contexts-and-paint-events" id="id66">Device contexts and paint events</a></li>
<li><a class="reference internal" href="#additional-resources-and-tutorials" id="id67">Additional resources and tutorials</a></li>
</ul>
</li>
</ul>
</div>
<div class="section" id="who-am-i">
<h2><a class="toc-backref" href="#id29">Who Am I</a><a class="headerlink" href="#who-am-i" title="Permalink to this headline">¶</a></h2>
<div class="figure align-right">
<a class="reference external image-reference" href="http://infinity77.net"><img alt="_images/andrea_gavana.png" src="_images/andrea_gavana.png" /></a>
</div>
<p>I am a Senior Reservoir Engineer at <a class="reference external" href="http://www.maerskoil.com/">Maersk Oil</a> in Copenhagen,
Denmark, where I mix a 10-years reservoir engineering knowledge with the power of Python and
its libraries to solve many everyday problems arising during the numerical studies of oil
and gas fields.</p>
<p>I am the author and the maintainer of the <a class="reference external" href="http://xoomer.virgilio.it/infinity77/AGW_Docs/index.html">AGW</a>
(<strong>Advanced Generic Widgets</strong>) library for wxPython, a large collection of owner-drawn and
custom widgets shipped officially with every new release of wxPython.</p>
<p>Contacts:</p>
<ul class="simple">
<li>E-mail: <a class="reference external" href="mailto:andrea&#46;gavana&#37;&#52;&#48;gmail&#46;com">andrea<span>&#46;</span>gavana<span>&#64;</span>gmail<span>&#46;</span>com</a></li>
<li>Twitter: <cite>&#64;AndreaGavana</cite></li>
</ul>
</div>
<div class="section" id="tutorial-description">
<h2><a class="toc-backref" href="#id30">Descripción del Tutorial</a><a class="headerlink" href="#tutorial-description" title="Permalink to this headline">¶</a></h2>
<p>Este tutorial es una rápida introducción a wxPython, dividido en dos partes:</p>
<ul class="simple">
<li>Instalación y configuración</li>
<li>Construir un esqueleto de una aplicación wxPython</li>
<li>Window layout management with Sizers</li>
<li>Aprender como usar los widgets centrales más comunes</li>
<li>Aspectos básicos de la creación de controles personalizados con wxPython</li>
<li>&#8220;Estilo libre&#8221; - dependiendo del tiempo (?)</li>
</ul>
<p>Las fuentes están disponibles <a class="reference external" href="_sources/wxpython.txt">aquí</a>. Las figuras están en el directorio <a class="reference external" href="figures/">figures</a> y todos los scripts se encuentran en el directorio <a class="reference external" href="scripts/">scripts</a>
El tutorial está también en línea en <a class="reference external" href="http://www.infinity77.net/pycon/tutorial/pybr/wxpython.html">mi página web</a>.</p>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Ubicación del tutorial</p>
<ul class="simple">
<li>Tutorial completo (comprimido - <strong>RECOMENDADO</strong>): <a class="reference external" href="http://bit.ly/TgyfRN">http://bit.ly/TgyfRN</a></li>
<li> Versión en online: <a class="reference external" href="http://bit.ly/TdeKq0">http://bit.ly/TdeKq0</a></li>
<li>Archivo comprimido de scripts: <a class="reference external" href="http://bit.ly/T5YzdL">http://bit.ly/T5YzdL</a></li>
</ul>
</div>
<div class="line-block">
<div class="line"><br /></div>
</div>
<p>All code and material is licensed under a Creative Commons Attribution 3.0
United States License (CC-by) <a class="reference external" href="http://creativecommons.org/licenses/by/3.0/us">http://creativecommons.org/licenses/by/3.0/us</a></p>
</div>
<div class="section" id="introduction">
<h2><a class="toc-backref" href="#id31">Introducción</a><a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
<p>wxPython es uno de los frameworks más famosos utilizados para construir interfaces gráficas
de usuario (GUI) en Python. Proporciona un "look and feel" (aspecto y sensación) nativos en
todas las plataformas soportadas (Windows, Linux / Unix, Mac) y tiene un vasto repositorio de
owner-drawn controls (controles personalizados?). Además, el demo wxPython es el lugar
dónde empezar a buscar ejemplos y fragmentos de código fuente.</p>
<div class="section" id="code-editors">
<h3><a class="toc-backref" href="#id32">Code editors</a><a class="headerlink" href="#code-editors" title="Permalink to this headline">¶</a></h3>
<p>If you plan to run the various scripts available in this tutorial directly from your
preferred editor, you should check that it does not interfere with the wxPython
<cite>event loop</cite>. Eclipse, Wingware IDE, Editra, Ulipad, Dr. Python and newest versions
of IDLE (and many other editors) support this functionality. If your preferred editor
does not - you can easily find out by running the <a class="reference external" href="scripts/hello_world.py">Hello World</a>
sample and see if it hangs - you can still run the samples via the command line:</p>
<div class="highlight-python"><pre>$ python hello_world.py</pre>
</div>
</div>
<div class="section" id="documentation">
<h3><a class="toc-backref" href="#id33">Documentation</a><a class="headerlink" href="#documentation" title="Permalink to this headline">¶</a></h3>
<p>This tutorial contains many links to the documentation referring to the next
generation of wxPython - codenamed <strong>Phoenix</strong>. The reasons behind this choice are:</p>
<ul class="simple">
<li>The quality of the <strong>Phoenix</strong> documentation is much higher</li>
<li>Backward-incompatibilities between <strong>Phoenix</strong> and the previous versions of wxPython
are relatively few</li>
<li><strong>Phoenix</strong> is going to take over the world in a few months :-)</li>
</ul>
</div>
</div>
<div class="section" id="installation-and-configuration">
<h2><a class="toc-backref" href="#id34">Installation and Configuration</a><a class="headerlink" href="#installation-and-configuration" title="Permalink to this headline">¶</a></h2>
<div class="section" id="windows-binaries">
<h3><a class="toc-backref" href="#id35">Windows Binaries</a><a class="headerlink" href="#windows-binaries" title="Permalink to this headline">¶</a></h3>
<p>Choose an installer that matches the version of Python you will be using. If you are using a 64-bit
version of Python then make sure you also get a 64-bit wxPython, otherwise choose a 32-bit installer
even if you are on a 64-bit version of Windows. There is no longer a separate ansi and Unicode build,
<strong>it&#8217;s all Unicode now</strong>.</p>
<table border="1" class="docutils">
<colgroup>
<col width="75%" />
<col width="25%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Installer</th>
<th class="head">Architecture</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-win32-2.9.4.0-py26.exe">wxPython2.9-win32-py26</a></td>
<td>32-bit Python 2.6</td>
</tr>
<tr class="row-odd"><td><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-win64-2.9.4.0-py26.exe">wxPython2.9-win64-py26</a></td>
<td>64-bit Python 2.6</td>
</tr>
<tr class="row-even"><td><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-win32-2.9.4.0-py27.exe">wxPython2.9-win32-py27</a></td>
<td>32-bit Python 2.7</td>
</tr>
<tr class="row-odd"><td><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-win64-2.9.4.0-py27.exe">wxPython2.9-win64-py27</a></td>
<td>64-bit Python 2.7</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="wxpython-demo-for-windows">
<h3><a class="toc-backref" href="#id36">wxPython Demo for Windows</a><a class="headerlink" href="#wxpython-demo-for-windows" title="Permalink to this headline">¶</a></h3>
<p>This <a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-win32-docs-demos-2.9.4.0.exe">installer</a>
contains the infamous wxPython demo, other samples, and wxWidgets documentation.</p>
</div>
<div class="section" id="mac-osx-binaries">
<h3><a class="toc-backref" href="#id37">Mac OSX Binaries</a><a class="headerlink" href="#mac-osx-binaries" title="Permalink to this headline">¶</a></h3>
<p>The wxPython binaries for OSX are mountable disk images. Simply double click to mount the image and then
run the installer application in the image. Be sure to download the image that matches the version of Python
that you want to use it with. The files with &#8220;carbon&#8221; in the name use the Carbon API for implementing the
GUI, are compatible with PPC and i386 machines are will work on OSX 10.4 and onwards. The file with &#8220;cocoa&#8221;
in the name use the Cocoa API for implementing the GUI, requires at least OSX 10.5, and supports either
32-bit or 64-bit architectures.</p>
<ul class="simple">
<li><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-osx-2.9.4.0-carbon-py2.6.dmg">wxPython2.9-osx-carbon-py2.6</a></li>
<li><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-osx-2.9.4.0-carbon-py2.7.dmg">wxPython2.9-osx-carbon-py2.7</a></li>
<li><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-osx-2.9.4.0-cocoa-py2.7.dmg">wxPython2.9-osx-cocoa-py2.7</a></li>
</ul>
</div>
<div class="section" id="wxpython-demo-for-mac-osx">
<h3><a class="toc-backref" href="#id38">wxPython Demo for Mac OSX</a><a class="headerlink" href="#wxpython-demo-for-mac-osx" title="Permalink to this headline">¶</a></h3>
<p>These disk images contain the wxPython demo, the documentation, some other samples and some tools:</p>
<ul class="simple">
<li><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-osx-docs-demos-2.9.4.0-carbon-py2.6.dmg">wxPython2.9-osx-docs-demos-carbon-py2.6</a></li>
<li><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-osx-docs-demos-2.9.4.0-carbon-py2.7.dmg">wxPython2.9-osx-docs-demos-carbon-py2.7</a></li>
<li><a class="reference external" href="http://downloads.sourceforge.net/wxpython/wxPython2.9-osx-docs-demos-2.9.4.0-cocoa-py2.7.dmg">wxPython2.9-osx-docs-demos-cocoa-py2.7</a></li>
</ul>
</div>
<div class="section" id="linux-binaries">
<h3><a class="toc-backref" href="#id39">Linux Binaries</a><a class="headerlink" href="#linux-binaries" title="Permalink to this headline">¶</a></h3>
<p>To get prebuilt binaries for Linux or other platforms, please search in your distro&#8217;s package repository,
or any 3rd party repositories that may be available to you. Ubuntu users can get information about the the
wx APT repository here. If all else fails you can build wxPython yourself from the source code,
see the <a class="reference external" href="http://wxpython.org/BUILD.html">build instructions</a>.</p>
</div>
</div>
<div class="section" id="a-first-application">
<h2><a class="toc-backref" href="#id40">A First Application</a><a class="headerlink" href="#a-first-application" title="Permalink to this headline">¶</a></h2>
<p>In this section, we are going to build step by step a skeleton of a wxPython application,
enriching it incrementally. Every sub-section contains one or more exercises for you to
familiarize yourself with the wxPython framework.</p>
<div class="section" id="id1">
<h3><a class="toc-backref" href="#id41">Hello World</a><a class="headerlink" href="#id1" title="Permalink to this headline">¶</a></h3>
<div class="admonition-documentation-documentation admonition">
<p class="first admonition-title"><img alt="documentation" class="align-top" src="_images/documentation.png" style="width: 32px;" /> Documentation</p>
<ul class="last simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/App.html#App.__init__">wx.App instantiation</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Frame.html#Frame.__init__">wx.Frame initialization</a></li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/hello_world.py"><img alt="_images/hello_world.png" src="_images/hello_world.png" /></a>
</div>
<p>As in (almost) all every other language and library, this is the simplest &#8220;Hello World&#8221;
application you can write in wxPython:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="c"># In every wxPython application, we must import the wx library</span>
<span class="kn">import</span> <span class="nn">wx</span>

<span class="c"># Create an application class instance</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">App</span><span class="p">()</span>

<span class="c"># Create a frame (i.e., a floating top-level window)</span>
<span class="n">frame</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Hello world&#39;</span><span class="p">)</span>

<span class="c"># Show the frame on screen</span>
<span class="n">frame</span><span class="o">.</span><span class="n">Show</span><span class="p">()</span>

<span class="c"># Enter the application main loop</span>
<span class="n">app</span><span class="o">.</span><span class="n">MainLoop</span><span class="p">()</span>
</pre></div>
</div>
<p>The last line enters what wxPython defines as &#8220;MainLoop&#8221;. A &#8220;MainLoop&#8221; is an endless
cycle that catches up all events coming up to your application. It is an integral part
of any windows GUI application.</p>
<p>Although the code is very simple, you can do a lot of things with your window. You can
maximize it, minimize it, move it, resize it. All these things have been already done
for you by the framework.</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/hello_world1.py"><img alt="_images/hello_world1.png" src="_images/hello_world1.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/hello_world.py">Hello World</a> sample:</p>
<ol class="arabic simple">
<li>Modify it to create two frames instead of one, setting their title as &#8220;Hello 1&#8221;
and &#8220;Hello 2&#8221;.</li>
<li>Using the modified script in (1), make the second frame a child of the first.</li>
</ol>
<p>Observe what happens in (1) and (2) when you close the first frame. Does the
application terminate?</p>
<p>Click on the figure for the solution.</p>
</div>
</div>
<div class="section" id="menubar-and-statusbar">
<h3><a class="toc-backref" href="#id42">Menubar and statusbar</a><a class="headerlink" href="#menubar-and-statusbar" title="Permalink to this headline">¶</a></h3>
<div class="admonition-documentation-documentation admonition">
<p class="first admonition-title"><img alt="documentation" class="align-top" src="_images/documentation.png" style="width: 32px;" /> Documentation</p>
<ul class="last simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/MenuBar.html#MenuBar">wx.MenuBar</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/StatusBar.html#StatusBar">wx.StatusBar</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Frame.html#Frame.CreateStatusBar">CreateStatusBar</a></li>
</ul>
</div>
<p>Almost all the applications sport a menu bar and a status bar in their main window.</p>
<p>A menu bar is a very powerful tool to let the user interact with your GUI as it displays
(various levels of) cascading menus with multiple options.</p>
<p>A status bar is a narrow window that can be placed along the bottom of a frame and it is
mostly used to give small amounts of status information.</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/menubar_statusbar.py"><img alt="_images/menubar_statusbar.png" src="_images/menubar_statusbar.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">wx</span>

<span class="k">class</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)</span>

        <span class="c"># A Statusbar in the bottom of the window</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">CreateStatusBar</span><span class="p">()</span>

        <span class="c"># Setting up the menu</span>
        <span class="n">file_menu</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Menu</span><span class="p">()</span>

        <span class="c"># wx.ID_ABOUT and wx.ID_EXIT are standard IDs provided</span>
        <span class="c"># by wxWidgets.</span>
        <span class="n">file_menu</span><span class="o">.</span><span class="n">Append</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">ID_ABOUT</span><span class="p">,</span> <span class="s">&#39;&amp;About&#39;</span><span class="p">,</span>
                         <span class="s">&#39;Information about this application&#39;</span><span class="p">)</span>
        <span class="n">file_menu</span><span class="o">.</span><span class="n">AppendSeparator</span><span class="p">()</span>
        <span class="n">file_menu</span><span class="o">.</span><span class="n">Append</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">ID_EXIT</span><span class="p">,</span> <span class="s">&#39;E&amp;xit&#39;</span><span class="p">,</span> <span class="s">&#39;Exit the application&#39;</span><span class="p">)</span>

        <span class="c"># Creating the menubar</span>
        <span class="n">menu_bar</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">MenuBar</span><span class="p">()</span>

        <span class="c"># Adding the &#39;file_menu&#39; to the menu bar</span>
        <span class="n">menu_bar</span><span class="o">.</span><span class="n">Append</span><span class="p">(</span><span class="n">file_menu</span><span class="p">,</span> <span class="s">&#39;&amp;File&#39;</span><span class="p">)</span>

        <span class="c"># Adding the menu bar to the frame content</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">SetMenuBar</span><span class="p">(</span><span class="n">menu_bar</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Show</span><span class="p">()</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">App</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">frame</span> <span class="o">=</span> <span class="n">MainWindow</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="s">&#39;Sample application&#39;</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">MainLoop</span><span class="p">()</span>
</pre></div>
</div>
<p>Notice the <tt class="docutils literal"><span class="pre">wx.ID_ABOUT</span></tt> and <tt class="docutils literal"><span class="pre">wx.ID_EXIT</span></tt> ids. These are standard ids provided by wxWidgets
(see a <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/StandardID.enumeration.html">full list here</a>).
It is a good habit to use the standard ID if there is one available. This helps wxPython know
how to display the widget in each platform to make it look more native.</p>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>For part (2) you will need to use the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Frame.html#Frame.SetStatusWidths">SetStatusWidths</a>
and <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Frame.html#Frame.SetStatusText">SetStatusText</a>
methods.</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/menubar_statusbar1.py"><img alt="_images/menubar_statusbar1.png" src="_images/menubar_statusbar1.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/menubar_statusbar.py">MenuBar and StatusBar</a> sample:</p>
<ol class="arabic simple">
<li>Modify it to add an &#8220;Edit&#8221; top menu with &#8220;Cut&#8221;, &#8220;Copy&#8221; and &#8220;Paste&#8221; sub-menus.</li>
<li>Create a status bar with 2 fields, set the second field to have double width with respect
to the first and and display today&#8217;s date in the second field.</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
<div class="line-block">
<div class="line"><br /></div>
</div>
</div>
<div class="section" id="event-handling">
<h3><a class="toc-backref" href="#id43">Event handling</a><a class="headerlink" href="#event-handling" title="Permalink to this headline">¶</a></h3>
<div class="admonition-documentation-documentation admonition">
<p class="first admonition-title"><img alt="documentation" class="align-top" src="_images/documentation.png" style="width: 32px;" /> Documentation</p>
<ul class="last simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/events_overview.html#events-and-event-handling">Events and event handling</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Event.html#event">wx.Event</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/EvtHandler.html#evthandler">wx.EvtHandler</a></li>
</ul>
</div>
<p>Reacting to events in wxPython is called <cite>event handling</cite>. An event is when &#8220;something&#8221; happens
on your application (a button click, text input, mouse movement, a timer expires, etc...).
Much of GUI programming consists of responding to events.</p>
<p>You link a wxPython object to an event using the <cite>Bind()</cite> method:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)</span>

        <span class="c"># Other stuff...</span>

        <span class="n">menu_item</span> <span class="o">=</span> <span class="n">file_menu</span><span class="o">.</span><span class="n">Append</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">ID_EXIT</span><span class="p">,</span> <span class="s">&#39;E&amp;xit&#39;</span><span class="p">,</span> <span class="s">&#39;Exit the application&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_MENU</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">OnExit</span><span class="p">,</span> <span class="n">menu_item</span><span class="p">)</span>
</pre></div>
</div>
<p>This means that, from now on, when the user selects the &#8220;Exit&#8221; menu item, the method <cite>OnExit</cite>
will be executed. <tt class="docutils literal"><span class="pre">wx.EVT_MENU</span></tt> is the &#8220;select menu item&#8221; event. wxPython understands many
other events (everything that starts with <tt class="docutils literal"><span class="pre">EVT_</span></tt> in the <cite>wx</cite> namespace).</p>
<p>The <cite>OnExit</cite> method has the general declaration:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">OnExit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>

    <span class="c"># Close the frame, cannot be vetoed if force=True</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">Close</span><span class="p">(</span><span class="n">force</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></div>
</div>
<p>Here <cite>event</cite> is an instance of a subclass of <cite>wx.Event</cite>. For example, a button-click event -
<tt class="docutils literal"><span class="pre">wx.EVT_BUTTON</span></tt> - is a subclass of <cite>wx.Event</cite>.</p>
<p>Working with events is straightforward in wxPython. There are three steps:</p>
<ol class="arabic simple">
<li>Identify the event binder name: <tt class="docutils literal"><span class="pre">wx.EVT_BUTTON</span></tt>, <tt class="docutils literal"><span class="pre">wx.EVT_CLOSE</span></tt>, etc...</li>
<li>Create an event handler. It is a method called when an event is generated</li>
<li>Bind an event to an event handler</li>
</ol>
<p>Sometimes we need to stop processing an event: for example, think about a user closing your main
application window while the GUI still contains unsaved data. To do this, we call the method
<cite>Veto()</cite> on an event, inside an event handler:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)</span>

        <span class="c"># Other stuff...</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_CLOSE</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">OnClose</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">OnClose</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>

    <span class="c"># This displays a message box asking the user to confirm</span>
    <span class="c"># she wants to quit the application</span>
    <span class="n">dlg</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">MessageDialog</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;Are you sure you want to quit?&#39;</span><span class="p">,</span> <span class="s">&#39;Question&#39;</span><span class="p">,</span>
                           <span class="n">wx</span><span class="o">.</span><span class="n">YES_NO</span> <span class="o">|</span> <span class="n">wx</span><span class="o">.</span><span class="n">NO_DEFAULT</span> <span class="o">|</span> <span class="n">wx</span><span class="o">.</span><span class="n">ICON_QUESTION</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">dlg</span><span class="o">.</span><span class="n">ShowModal</span><span class="p">()</span> <span class="o">==</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_YES</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Destroy</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">event</span><span class="o">.</span><span class="n">Veto</span><span class="p">()</span>
</pre></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Window.html#Window.Close">Close</a>
and the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/CloseEvent.html#CloseEvent.Veto">Veto</a>
methods.</li>
</ul>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/events.py">Events</a> sample:</p>
<ol class="arabic simple">
<li>Modify it make the main frame &#8220;immortal&#8221;, i.e., non-closable by the user. Can you
close the main frame by pressing <tt class="docutils literal"><span class="pre">Alt</span></tt> + <tt class="docutils literal"><span class="pre">F4</span></tt> ? Or clicking on the &#8220;X&#8221; button
in the titlebar?</li>
</ol>
<p>Click <a class="reference external" href="scripts/events1.py">here</a> for the solution.</p>
</div>
</div>
<div class="section" id="adding-widgets">
<h3><a class="toc-backref" href="#id44">Adding widgets</a><a class="headerlink" href="#adding-widgets" title="Permalink to this headline">¶</a></h3>
<div class="admonition-documentation-documentation admonition">
<p class="first admonition-title"><img alt="documentation" class="align-top" src="_images/documentation.png" style="width: 32px;" /> Documentation</p>
<ul class="last simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextCtrl.html#TextCtrl">wx.TextCtrl</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextCtrl.html#styles-window-styles">wx.TextCtrl styles</a></li>
</ul>
</div>
<p>We are going to add an editable text box inside our frame (a <cite>wx.TextCtrl</cite>).
By default, a text box is a single-line field, but the <tt class="docutils literal"><span class="pre">wx.TE_MULTILINE</span></tt> parameter allows
you to enter multiple lines of text.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">control</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">TextCtrl</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="n">wx</span><span class="o">.</span><span class="n">TE_MULTILINE</span><span class="p">)</span>
</pre></div>
</div>
<p>A couple of things to notice:</p>
<ul class="simple">
<li>The text box is a <strong>child</strong> of the frame.</li>
<li>When a frame frame has exactly one child window, not counting the status and toolbar,
this child is resized to take the entire frame client area.</li>
</ul>
<p>We can create a link between the <cite>wx.TextCtrl</cite> behaviour and the menu selected by the user
by binding menu events (like &#8220;Cut&#8221;, &#8220;Copy&#8221; and &#8220;Paste&#8221; menu selections) to the main frame and
process the results in an event handler. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">control</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">TextCtrl</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="n">wx</span><span class="o">.</span><span class="n">TE_MULTILINE</span><span class="p">)</span>

        <span class="c"># Other stuff, menubar creation, etc...</span>

        <span class="c"># Bind the &quot;copy menu event&quot; to the OnCopy method</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_MENU</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">OnCopy</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">wx</span><span class="o">.</span><span class="n">ID_COPY</span><span class="p">)</span>


    <span class="k">def</span> <span class="nf">OnCopy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>

        <span class="c"># See if we can copy from the text box...</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">control</span><span class="o">.</span><span class="n">CanCopy</span><span class="p">():</span>
            <span class="c"># Actually copy the wx.TextCtrl content</span>
            <span class="c"># into the clipboard</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">control</span><span class="o">.</span><span class="n">Copy</span><span class="p">()</span>
</pre></div>
</div>
<p>In the <cite>OnCopy</cite> event handler we simply check if we can copy text from the text box (i.e., if
something is selected and can be copied to the clipboard) and we actually copy what is selected
into the clipboard.</p>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.Copy">Copy</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.Cut">Cut</a>
and <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.Paste">Paste</a>
methods for <cite>wx.TextCtrl</cite>.</li>
<li>If you wish to be fancy, in your exercise you can also check the values
for <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.CanCopy">CanCopy</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.CanCut">CanCut</a>
and <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.CanPaste">CanPaste</a>.</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/widgets1.py"><img alt="_images/widgets1.png" src="_images/widgets1.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/widgets.py">Widgets</a> sample:</p>
<ol class="arabic simple">
<li>The &#8220;Edit&#8221; top menu has the &#8220;Cut&#8221;, &#8220;Copy&#8221; and &#8220;Paste&#8221; sub-menus: bind the correct events to
the main frame and add event handlers for these menus.</li>
<li>Check that you can copy/paste <strong>text</strong> to/from another application (i.e., a word processor
or an IDE).</li>
<li>Look at another implementation of the <a class="reference external" href="scripts/widgets2.py">Widgets</a> sample: what did I
do differently?</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
</div>
<div class="section" id="window-layout-management">
<h2><a class="toc-backref" href="#id45">Window Layout Management</a><a class="headerlink" href="#window-layout-management" title="Permalink to this headline">¶</a></h2>
<p><strong>Layout management</strong>: describes how widgets are laid out in an application&#8217;s user interface.</p>
<p>wxPython provides a few alternatives:</p>
<ul class="simple">
<li>Absolute positioning (brute force): don&#8217;t. No, really, <strong>don&#8217;t</strong>;</li>
<li>Sizers: very powerful, not so simple at the beginning, but worth the effort;</li>
<li>SizedControls: add-on library to help simplify the creation of sizer-based layouts;</li>
<li>AUI (Advanced User Interface): docking windows and automatic layout management.</li>
</ul>
<div class="section" id="why-sizers">
<h3><a class="toc-backref" href="#id46">Why sizers?</a><a class="headerlink" href="#why-sizers" title="Permalink to this headline">¶</a></h3>
<p>Sizers, as represented by the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Sizer.html#sizer">wx.Sizer</a>
class and its descendants in the wxPython class hierarchy, have become the method of choice to
define the layout of controls in parent windows because of their ability to create visually appealing
frames independent of the platform, taking into account the differences in size and style of the
individual controls.</p>
</div>
<div class="section" id="the-idea-behind-sizers">
<h3><a class="toc-backref" href="#id47">The idea behind sizers</a><a class="headerlink" href="#the-idea-behind-sizers" title="Permalink to this headline">¶</a></h3>
<p>The layout algorithm used by sizers in wxPython is closely related to layout systems in other GUI
toolkits, such as Java&#8217;s AWT, the GTK toolkit or the Qt toolkit. It is based upon the idea of individual
subwindows reporting their minimal required size and their ability to get stretched if the size of the
parent window has changed. This will most often mean that the programmer does not set the start-up size
of a window, the window will rather be assigned a sizer and this sizer will be queried about the recommended
size.</p>
<p>This sizer in turn will query its children (which can be normal windows, empty space or other sizers) so
that a hierarchy of sizers can be constructed.</p>
<div class="admonition-note-note admonition">
<p class="first admonition-title"><img alt="note" class="align-top" src="_images/note.png" style="width: 32px;" /> Note</p>
<p class="last"><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Sizer.html#sizer">wx.Sizer</a> does not derive from
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Window.html#window">wx.Window</a> and thus does not interfere with tab
ordering and requires very few resources compared to a real window on screen.</p>
</div>
<p>What makes sizers so well fitted for use in wxPython is the fact that every control reports its own
minimal size and the algorithm can handle differences in font sizes or different window sizes on different
platforms without problems.</p>
<p>For example, if the standard font as well as the overall design of Linux/GTK widgets requires more space
than on Windows, the initial window size will automatically be bigger on Linux/GTK than on Windows.</p>
<p>There are currently 6 different kinds of sizers available in wxPython:</p>
<ul class="simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/BoxSizer.html#boxsizer">wx.BoxSizer</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/StaticBoxSizer.html#staticboxsizer">wx.StaticBoxSizer</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/GridSizer.html#gridsizer">wx.GridSizer</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/FlexGridSizer.html#flexgridsizer">wx.FlexGridSizer</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/GridBagSizer.html#gridbagsizer">wx.GridBagSizer</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/WrapSizer.html#wrapsizer">wx.WrapSizer</a></li>
</ul>
<p>Each represents a certain way to lay out window items or it fulfils a special task such as wrapping a
static box around a window item (or another sizer).</p>
</div>
<div class="section" id="common-features">
<h3><a class="toc-backref" href="#id48">Common features</a><a class="headerlink" href="#common-features" title="Permalink to this headline">¶</a></h3>
<div class="admonition-note-note admonition">
<p class="first admonition-title"><img alt="note" class="align-top" src="_images/note.png" style="width: 32px;" /> Note</p>
<p class="last">Note that only some controls can calculate their size (such as a <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/CheckBox.html#checkbox">wx.CheckBox</a>)
whereas others (such as a <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ListBox.html#listbox">wx.ListBox</a>) don&#8217;t
have any natural width or height and thus require an explicit size. Some controls can calculate their height,
but not their width (e.g. a single line text control).</p>
</div>
<p>All sizers are containers, i.e. they are used to lay out one window item (or several window items),
which they contain. Such items are sometimes referred to as the children of the sizer. Independent of how
the individual sizers lay out their children, all children have certain features in common:</p>
<ul>
<li><p class="first"><strong>A minimal size</strong>: This minimal size is usually identical to the initial size of the controls and may either
be set explicitly in the <cite>wx.Size</cite> field of the control constructor or may be calculated by wxPython, typically
by setting the height and/or the width of the item to -1.</p>
<div class="figure align-center">
<a class="reference external image-reference" href="scripts/common1.py"><img alt="_images/common1.png" src="_images/common1.png" /></a>
</div>
</li>
<li><p class="first"><strong>A border</strong>: The border is just empty space and is used to separate widgets in a parent window. This border can
either be all around, or at any combination of sides such as only above and below the control. The thickness of
this border must be set explicitly, typically 5 points. The following samples show frames with only one item
(a button) and a border of 0, 5, and 10 pixels around the button:</p>
<div class="figure align-center">
<a class="reference external image-reference" href="scripts/common2.py"><img alt="_images/common2.png" src="_images/common2.png" /></a>
</div>
</li>
<li><p class="first"><strong>An alignment</strong>: Often, a widget is given more space than its minimal size plus its border. Depending on what
flags are used for the respective widget, this widget can be made to fill out the available space entirely, i.e.
it will grow to a size larger than the minimal size, or it will be moved to either the centre of the available
space or to either side of the space. The following sample shows a listbox and three buttons in a horizontal
box sizer; one button is centred, one is aligned at the top, one is aligned at the bottom:</p>
<div class="figure align-center">
<a class="reference external image-reference" href="scripts/common3.py"><img alt="_images/common3.png" src="_images/common3.png" /></a>
</div>
</li>
<li><p class="first"><strong>A stretch factor</strong>: If a sizer contains more than one child and it is offered more space than its children and
their borders need, the question arises how to distribute the surplus space among the children. For this purpose,
a stretch factor (<cite>proportion</cite>) may be assigned to each child, where the default value of 0 indicates that the
child will not get more space than its requested minimum size.</p>
<p>A value of more than zero is interpreted in relation to the sum of all stretch factors in the children of the
respective sizer, i.e. if two children get a stretch factor of 1, they will get half the extra space each
<em>independent of whether one control has a minimal sizer inferior to the other or not</em>. The following sample shows
a frame with three buttons, the first one has a stretch factor of 1 and thus gets stretched, whereas the other
two buttons have a stretch factor of zero and keep their initial width:</p>
<div class="figure align-center">
<a class="reference external image-reference" href="scripts/common4.py"><img alt="_images/common4.png" src="_images/common4.png" /></a>
</div>
</li>
</ul>
</div>
<div class="section" id="wx-sizers-the-visual-approach">
<h3><a class="toc-backref" href="#id49"><cite>wx.Sizers</cite> - the visual approach</a><a class="headerlink" href="#wx-sizers-the-visual-approach" title="Permalink to this headline">¶</a></h3>
<div class="section" id="basic-way-of-adding-a-window">
<h4><a class="toc-backref" href="#id50">Basic way of adding a window</a><a class="headerlink" href="#basic-way-of-adding-a-window" title="Permalink to this headline">¶</a></h4>
<p>Let&#8217;s take a look at <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/BoxSizer.html#boxsizer">wx.BoxSizer</a>.
This is the most simple type of box sizer, and the way we add widgets to it is explained by looking
at the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Sizer.html#Sizer.Add">wx.BoxSizer.Add</a> signature:</p>
<hr color="#A9A9A9"><dl class="method">
<dt id="Add">
<tt class="descname">Add</tt><big>(</big><em>window</em>, <em>proportion=0</em>, <em>flag=0</em>, <em>border=0</em>, <em>userData=None</em><big>)</big><a class="headerlink" href="#Add" title="Permalink to this definition">¶</a></dt>
<dd><p>Appends a child to the sizer.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>window</strong> &#8211; a window, a spacer or another sizer to be added to the sizer. Its initial size
(either set explicitly by the user or calculated internally) is interpreted as the minimal and
in many cases also the initial size.</li>
<li><strong>proportion</strong> (<em>int</em>) &#8211; this parameter is used in <cite>wx.BoxSizer</cite> to indicate if a child of a sizer
can change its size in the main orientation of the <cite>wx.BoxSizer</cite> - where 0 stands for not changeable
and a value of more than zero is interpreted relative to the value of other children of the same
<cite>wx.BoxSizer</cite>. For example, you might have a horizontal <cite>wx.BoxSizer</cite> with three children, two
of which are supposed to change their size with the sizer. Then the two stretchable windows would
get a value of 1 each to make them grow and shrink equally with the sizer&#8217;s horizontal dimension.</li>
<li><strong>flag</strong> (<em>int</em>) &#8211; OR-combination of flags affecting sizer&#8217;s behaviour.</li>
<li><strong>border</strong> (<em>int</em>) &#8211; determines the border width, if the flag parameter is set to include any border flag.</li>
<li><strong>userData</strong> (<em>object</em>) &#8211; allows an extra object to be attached to the sizer item, for use in derived
classes when sizing information is more complex than the proportion and flag will allow for.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body"><p class="first last"><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/SizerItem.html#sizeritem">SizerItem</a></p>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<hr color="#A9A9A9"><p>Let&#8217;s create a vertical sizer (children will be placed on top of each other) and place two buttons in it.
All the &#8220;extra&#8221; parameters are set to 0; we&#8217;ll worry about them later.</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/boxsizer1.py"><img alt="_images/boxsizer1.png" src="_images/boxsizer1.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;An extremely long button text&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Small button&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
<p>You&#8217;ll notice a couple of things about this:</p>
<ul class="simple">
<li>The buttons are just big enough to accommodate the text in them. In fact, any control placed
into a sizer this way will appear at its minimum size unless we change the parameters.</li>
<li>The window size is not changed to fit the sizer. This results in a lot of ugly empty space.</li>
</ul>
<p>Let&#8217;s worry about the second issue first. To make the window size more appropriate, we can set
the size hints to tell the enclosing window to adjust to the size of the sizer:</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/boxsizer2.py"><img alt="_images/boxsizer2.png" src="_images/boxsizer2.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;An extremely long button text&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Small button&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="new"><span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span></span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
<p>This is particularly useful in circumstances like this one, in which the <cite>wx.Frame</cite>&#8216;s default size
would otherwise be much too big or small to show most layouts in an aesthetically pleasing manner.</p>
</div>
<div class="section" id="the-proportion-parameter">
<h4><a class="toc-backref" href="#id51">The <cite>proportion</cite> parameter</a><a class="headerlink" href="#the-proportion-parameter" title="Permalink to this headline">¶</a></h4>
<p>The first parameter to <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Sizer.html#Sizer.Add">wx.BoxSizer.Add</a>
is obviously the <cite>wx.Window</cite> or <cite>wx.Sizer</cite> that you are adding. The second one (the <cite>proportion</cite>)
defines how large the sizer&#8217;s children are in relation to each other. In a vertical sizer, this changes
the height; in a horizontal sizer, this changes the width. Here are some examples:</p>
<table border="1" class="docutils">
<colgroup>
<col width="80%" />
<col width="20%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Code</th>
<th class="head">Resulting Image</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Second button is three times as tall as first button</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;An extremely long button text&#39;</span><span class="p">),</span> <span class="mi"><span class="new">1</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Small button&#39;</span><span class="p">),</span> <span class="mi"><span class="new">3</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer3.py"><img alt="_images/boxsizer3.png" src="_images/boxsizer3.png" /></a>
</div>
</td>
</tr>
<tr class="row-odd"><td>Same code as above, with window resized. Notice that the bottom button is still three times as tall as the top button.</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer3.py"><img alt="_images/boxsizer31.png" src="_images/boxsizer31.png" /></a>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># First button is 3/2 the height of the second button</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;An extremely long button text&#39;</span><span class="p">),</span> <span class="mi"><span class="new">3</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Small button&#39;</span><span class="p">),</span> <span class="mi"><span class="new">2</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer32.py"><img alt="_images/boxsizer32.png" src="_images/boxsizer32.png" /></a>
</div>
</td>
</tr>
</tbody>
</table>
<div class="line-block">
<div class="line"><br /></div>
</div>
<p>If one of the <cite>proportion</cite> parameters is 0, that <cite>wx.Window</cite> will be the minimum size, and the others
will resize proportionally:</p>
<table border="1" class="docutils">
<colgroup>
<col width="80%" />
<col width="20%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Code</th>
<th class="head">Resulting Image</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Third button is twice the size of the second button</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;An extremely long button text&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Small button&#39;</span><span class="p">),</span> <span class="mi"><span class="new">1</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Another button&#39;</span><span class="p">),</span> <span class="mi"><span class="new">2</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer33.py"><img alt="_images/boxsizer33.png" src="_images/boxsizer33.png" /></a>
</div>
</td>
</tr>
<tr class="row-odd"><td>Same code as above, with window resized. The top button (proportion 0) is still the minimum height,
and the third button is still twice the height of the second.</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer33.py"><img alt="_images/boxsizer34.png" src="_images/boxsizer34.png" /></a>
</div>
</td>
</tr>
</tbody>
</table>
<p>This is especially useful when you want, for example, a button at the bottom which is only
as big as necessary, and some other control that occupies the rest of the frame. To do so,
give the button proportion 0 and the other control a number greater than 0. Mac users in
particular will appreciate you for not creating huge aqua-styled buttons.</p>
</div>
<div class="section" id="the-flags-and-border-parameters">
<h4><a class="toc-backref" href="#id52">The <cite>flags</cite> and <cite>border</cite> parameters</a><a class="headerlink" href="#the-flags-and-border-parameters" title="Permalink to this headline">¶</a></h4>
<p>The <cite>flag</cite> argument accepted by <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Sizer.html#Sizer.Add">wx.Sizer.Add</a>
is a <tt class="docutils literal"><span class="pre">OR</span></tt>-combination of the following flags. Two main behaviours are defined using these flags. One is
the border around a window: the <cite>border</cite> parameter determines the border width whereas the flags given here
determine which side(s) of the item that the border will be added. The other flags determine how the sizer
item behaves when the space allotted to the sizer changes, and is somewhat dependent on the specific kind
of sizer used.</p>
<table border="1" class="docutils">
<colgroup>
<col width="47%" />
<col width="53%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Sizer Flag</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.TOP</span></tt></td>
<td rowspan="5">These flags are used to specify which side(s) of the sizer
item the border width will apply to.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.BOTTOM</span></tt></td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.LEFT</span></tt></td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.RIGHT</span></tt></td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.ALL</span></tt></td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.EXPAND</span></tt></td>
<td>The item will be expanded to fill the space assigned to
the item.</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.SHAPED</span></tt></td>
<td>The item will be expanded as much as possible while also
maintaining its aspect ratio</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.FIXED_MINSIZE</span></tt></td>
<td>If you would rather have a window item stay the size it started with then
use <tt class="docutils literal"><span class="pre">FIXED_MINSIZE</span></tt></td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.RESERVE_SPACE_EVEN_IF_HIDDEN</span></tt></td>
<td>Normally <cite>Sizers</cite> don&#8217;t allocate space for hidden windows or other items.
This flag overrides this behavior so that sufficient space is allocated for
the window even if it isn&#8217;t visible. This makes it possible to dynamically
show and hide controls without resizing parent dialog, for example.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.ALIGN_CENTER</span></tt> <strong>or</strong> <tt class="docutils literal"><span class="pre">wx.ALIGN_CENTRE</span></tt></td>
<td rowspan="7">The <tt class="docutils literal"><span class="pre">ALIGN*</span></tt> flags allow you to specify the alignment of the item
within the space allotted to it by the sizer, adjusted for the border if
any.</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.ALIGN_LEFT</span></tt></td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.ALIGN_RIGHT</span></tt></td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.ALIGN_TOP</span></tt></td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.ALIGN_BOTTOM</span></tt></td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">wx.ALIGN_CENTER_VERTICAL</span></tt> <strong>or</strong> <tt class="docutils literal"><span class="pre">wx.ALIGN_CENTRE_VERTICAL</span></tt></td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">wx.ALIGN_CENTER_HORIZONTAL</span></tt> <strong>or</strong> <tt class="docutils literal"><span class="pre">wx.ALIGN_CENTRE_HORIZONTAL</span></tt></td>
</tr>
</tbody>
</table>
<div class="line-block">
<div class="line"><br /></div>
</div>
<p>Let&#8217;s start with the simplest case: the alignment flags. These are pretty self-explanatory.</p>
<table border="1" class="docutils">
<colgroup>
<col width="80%" />
<col width="20%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Code</th>
<th class="head">Resulting Image</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Second button is right aligned</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">ALIGN_RIGHT</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer4.py"><img alt="_images/boxsizer4.png" src="_images/boxsizer4.png" /></a>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Second button is center-aligned</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">ALIGN_CENTER</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer41.py"><img alt="_images/boxsizer41.png" src="_images/boxsizer41.png" /></a>
</div>
</td>
</tr>
</tbody>
</table>
<p>Next is the <tt class="docutils literal"><span class="pre">wx.EXPAND</span></tt> flag. This is synonymous with <tt class="docutils literal"><span class="pre">wx.GROW</span></tt>.</p>
<table border="1" class="docutils">
<colgroup>
<col width="80%" />
<col width="20%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Code</th>
<th class="head">Resulting Image</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Second button expands to the whole parent&#39;s width</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">EXPAND</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer5.py"><img alt="_images/boxsizer5.png" src="_images/boxsizer5.png" /></a>
</div>
</td>
</tr>
</tbody>
</table>
<p>You can see that the first button takes its minimum size, and the second one grows to match it. This affects
controls in the opposite manner of the second parameter; <tt class="docutils literal"><span class="pre">wx.EXPAND</span></tt> in a vertical sizer causes horizontal
expansion, and in a horizontal sizer it causes vertical expansion.</p>
<p>Next is <tt class="docutils literal"><span class="pre">wx.SHAPED</span></tt>. This flag ensures that the width and height of the object stay proportional to each other.
It doesn&#8217;t make much sense for buttons, but can be excellent for bitmaps, which would be contorted or clipped
if not scaled proportionally.</p>
<table border="1" class="docutils">
<colgroup>
<col width="75%" />
<col width="25%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Code</th>
<th class="head">Resulting Image</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Second button will scale proportionally</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">SHAPED</span></span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer51.py"><img alt="_images/boxsizer51.png" src="_images/boxsizer51.png" /></a>
</div>
</td>
</tr>
<tr class="row-odd"><td>Same code as above, with window resized. The width grew dramatically with the height. In fact, it didn&#8217;t
quite grow vertically the whole way because it couldn&#8217;t maintain the correct ratio while doing so.</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer51.py"><img alt="_images/boxsizer52.png" src="_images/boxsizer52.png" /></a>
</div>
</td>
</tr>
</tbody>
</table>
<p>Finally, we have the border flags. These only make sense when the <cite>border</cite> parameter is greater than 0, and describe
the sides of the control on which the border should appear. In order to demonstrate this most clearly, we&#8217;ll keep
the <tt class="docutils literal"><span class="pre">wx.EXPAND</span></tt> flag.</p>
<table border="1" class="docutils">
<colgroup>
<col width="80%" />
<col width="20%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Code</th>
<th class="head">Resulting Image</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Border size effects</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">EXPAND</span> <span class="o">|</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">LEFT</span></span><span class="p">,</span> <span class="mi"><span class="new">20</span></span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer52.py"><img alt="_images/boxsizer53.png" src="_images/boxsizer53.png" /></a>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Border size effects</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">EXPAND</span> <span class="o">|</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">LEFT</span></span> <span class="o">|</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">RIGHT</span></span><span class="p">,</span> <span class="mi"><span class="new">20</span></span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer53.py"><img alt="_images/boxsizer54.png" src="_images/boxsizer54.png" /></a>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Border size effects</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">EXPAND</span> <span class="o">|</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">LEFT</span></span> <span class="o">|</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">RIGHT</span></span> <span class="o">|</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">TOP</span></span><span class="p">,</span> <span class="mi"><span class="new">20</span></span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer54.py"><img alt="_images/boxsizer55.png" src="_images/boxsizer55.png" /></a>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last highlight-python"><div class="highlight"><pre><span class="n">sizer</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">BoxSizer</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">VERTICAL</span><span class="p">)</span>
<span class="c"># Border size effects</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;An extremely long button text&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Small Button&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">EXPAND</span> <span class="o">|</span> <span class="new"><span class="n">wx</span><span class="o">.</span><span class="n">ALL</span></span><span class="p">,</span> <span class="mi"><span class="new">20</span></span><span class="p">)</span>
<span class="n">sizer</span><span class="o">.</span><span class="n">SetSizeHints</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">SetSizer</span><span class="p">(</span><span class="n">sizer</span><span class="p">)</span>
</pre></div>
</div>
</td>
<td><div class="first last figure align-left">
<a class="reference external image-reference" href="scripts/boxsizer55.py"><img alt="_images/boxsizer56.png" src="_images/boxsizer56.png" /></a>
</div>
</td>
</tr>
</tbody>
</table>
<p>You can see that the button is offset from the specified edges of the sizer by the number of pixels that we
specified in the <cite>border</cite> parameter.</p>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Sizer.html#Sizer.Add">wx.BoxSizer.Add</a>
and the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/StaticText.html#StaticText.__init__">wx.StaticText constructor</a></li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/sizers1.py"><img alt="_images/sizers1.png" src="_images/sizers1.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Starting from the <a class="reference external" href="scripts/sizers.py">Sizers</a> sample:</p>
<ol class="arabic simple">
<li>Modify it to add some aesthetically pleasing borders between the widgets (say, 10 pixels).</li>
<li>Make the text control expand to fill all the remaining available space.</li>
<li>Can you make the static text right-aligned?</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
<div class="line-block">
<div class="line"><br /></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the Wiki page on the <a class="reference external" href="http://wiki.wxpython.org/Widget%20Inspection%20Tool">Widget Inspection Tool</a>,
the docs on <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/CheckBox.html#CheckBox.__init__">wx.CheckBox</a> and
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/SpinCtrl.html#SpinCtrl.__init__">wx.SpinCtrl</a> constructors.</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/sizers_plus.py"><img alt="_images/sizers_plus.png" src="_images/sizers_plus.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Run the <a class="reference external" href="scripts/sizers_plus.py">Sizers+</a> sample (<strong>without looking at the code!!</strong>), and
The <strong>Widget Inspection Tool</strong> will pop up.</p>
<ol class="arabic simple">
<li>Using the Widget Inspection Tool, can you work out what combination/hierarchy of sizers
I have used for this sample? Which flags and borders did I use for all the widgets/sizers?</li>
<li>Can you reproduce the layout I created?</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
</div>
</div>
<div class="section" id="fonts-colours-and-bitmaps">
<h2><a class="toc-backref" href="#id53">Fonts, Colours and Bitmaps</a><a class="headerlink" href="#fonts-colours-and-bitmaps" title="Permalink to this headline">¶</a></h2>
<p>This section will briefly show some basic information about graphic device interface objects, which
include fonts, colours and bitmaps.</p>
<div class="section" id="wx-font">
<h3><a class="toc-backref" href="#id54"><cite>wx.Font</cite></a><a class="headerlink" href="#wx-font" title="Permalink to this headline">¶</a></h3>
<p>A font is an object which determines the appearance of text, primarily when drawing text to a window or
device context. A <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Font.html#font">wx.Font</a> is determined by
the following parameters (not all of them have to be specified, of course):</p>
<table border="1" class="docutils">
<colgroup>
<col width="22%" />
<col width="78%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td><strong>Point size</strong></td>
<td>This is the standard way of referring to text size.</td>
</tr>
<tr class="row-even"><td><strong>Family</strong></td>
<td>Supported families are: <tt class="docutils literal"><span class="pre">wx.DEFAULT</span></tt>, <tt class="docutils literal"><span class="pre">wx.DECORATIVE</span></tt>,
<tt class="docutils literal"><span class="pre">wx.ROMAN</span></tt>, <tt class="docutils literal"><span class="pre">wx.SCRIPT</span></tt>, <tt class="docutils literal"><span class="pre">wx.SWISS</span></tt>, <tt class="docutils literal"><span class="pre">wx.MODERN</span></tt>.
<tt class="docutils literal"><span class="pre">wx.MODERN</span></tt> is a fixed pitch font; the others are either fixed or variable pitch.</td>
</tr>
<tr class="row-odd"><td><strong>Style</strong></td>
<td>The value can be <tt class="docutils literal"><span class="pre">wx.NORMAL</span></tt>, <tt class="docutils literal"><span class="pre">wx.SLANT</span></tt> or <tt class="docutils literal"><span class="pre">wx.ITALIC</span></tt>.</td>
</tr>
<tr class="row-even"><td><strong>Weight</strong></td>
<td>The value can be <tt class="docutils literal"><span class="pre">wx.NORMAL</span></tt>, <tt class="docutils literal"><span class="pre">wx.LIGHT</span></tt> or <tt class="docutils literal"><span class="pre">wx.BOLD</span></tt>.</td>
</tr>
<tr class="row-odd"><td><strong>Underlining</strong></td>
<td>The value can be <tt class="docutils literal"><span class="pre">True</span></tt> or <tt class="docutils literal"><span class="pre">False</span></tt>.</td>
</tr>
<tr class="row-even"><td><strong>Face name</strong></td>
<td>An optional string specifying the actual typeface to be used. If <tt class="docutils literal"><span class="pre">None</span></tt>, a
default typeface will chosen based on the family.</td>
</tr>
<tr class="row-odd"><td><strong>Encoding</strong></td>
<td>The font encoding</td>
</tr>
</tbody>
</table>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/fonts.py"><img alt="_images/fonts.png" src="_images/fonts.png" /></a>
</div>
<p>As an example, you can create a font object and assign it to a widget like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">static_text</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">StaticText</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Some text here&#39;</span><span class="p">)</span>

<span class="n">font1</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Font</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">SWISS</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ITALIC</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">NORMAL</span><span class="p">)</span>
<span class="n">static_text</span><span class="o">.</span><span class="n">SetFont</span><span class="p">(</span><span class="n">font1</span><span class="p">)</span>

<span class="n">text_ctrl</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">TextCtrl</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Some other text&#39;</span><span class="p">)</span>

<span class="c"># A font can be retrieved from the OS default font and modified</span>
<span class="n">font2</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">SystemSettings</span><span class="o">.</span><span class="n">GetFont</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">SYS_DEFAULT_GUI_FONT</span><span class="p">)</span>
<span class="n">font2</span><span class="o">.</span><span class="n">SetPointSize</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
<span class="n">text_ctrl</span><span class="o">.</span><span class="n">SetFont</span><span class="p">(</span><span class="n">font2</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="wx-colour">
<h3><a class="toc-backref" href="#id55"><cite>wx.Colour</cite></a><a class="headerlink" href="#wx-colour" title="Permalink to this headline">¶</a></h3>
<p>A colour is an object representing a combination of Red, Green, Blue and Alpha channel (RGBA)
intensity values. Valid RGBA values are in the range 0 to 255.</p>
<p>There are three ways for setting colours. We can create a <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Colour.html#colour">wx.Colour</a>
object, use a predefined colour name or use hex value string:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">text_ctrl</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">TextCtrl</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Some text&#39;</span><span class="p">)</span>

<span class="n">text_ctrl_SetBackgroundColour</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Colour</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">))</span>
<span class="c"># OR</span>
<span class="n">text_ctrl_SetBackgroundColour</span><span class="p">(</span><span class="s">&#39;BLUE&#39;</span><span class="p">)</span>
<span class="c"># OR</span>
<span class="n">text_ctrl</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="s">&#39;#0000FF&#39;</span><span class="p">)</span>
</pre></div>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/colours.py"><img alt="_images/colours.png" src="_images/colours.png" /></a>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/colours.py"><img alt="_images/colours1.png" src="_images/colours1.png" /></a>
</div>
<p>As an alternative, you can also use the handy <em>colour database</em> provided in the
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/lib.colourdb.html#module-lib.colourdb">wx.lib.colourdb</a> module
and comprising more than 600 named colours:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">wx</span>
<span class="kn">import</span> <span class="nn">wx.lib.colourdb</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">class</span> <span class="nc">MyFrame</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">):</span>
        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;Colour database&#39;</span><span class="p">)</span>

        <span class="c"># Show the selected colour in this panel</span>
        <span class="n">panel</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Panel</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">colourdb</span><span class="o">.</span><span class="n">updateColourDB</span><span class="p">()</span>
        <span class="c"># Create a colour list from the colourdb database</span>
        <span class="n">colour_list</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">colourdb</span><span class="o">.</span><span class="n">getColourList</span><span class="p">()</span>

        <span class="c"># Get one random colour between those 600 available</span>
        <span class="n">random_colour</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colour_list</span><span class="p">)</span>
        <span class="n">panel</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="n">random_colour</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="wx-bitmap">
<h3><a class="toc-backref" href="#id56"><cite>wx.Bitmap</cite></a><a class="headerlink" href="#wx-bitmap" title="Permalink to this headline">¶</a></h3>
<p>A bitmap is a collection of bits that form an image. It is a grid of individual dots stored in memory
or in a file. Each dot has it&#8217;s own colour. When the image is displayed, the computer transfers a bit
map into pixels on monitors or ink dots on printers. The quality of a bitmap is determined by the
<strong>resolution</strong> and the <strong>color depth</strong> of the image. The resolution is the total number of pixels in
the image. The color depth is the amount of information in each pixel.</p>
<p>An example construction to create a bitmap in wxPython starting from an existing image:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">bmp</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Bitmap</span><span class="p">(</span><span class="s">&#39;wxpython.png&#39;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">BITMAP_TYPE_PNG</span><span class="p">)</span>
</pre></div>
</div>
<p>The same can be done with other file formats, such as GIF, JPG, BMP, TIFF, etc... The full list of
supported formats is available in the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/BitmapType.enumeration.html#bitmaptype">BitmapType</a>
documentation.</p>
<p>When you need to use standard (i.e., platform-provided) bitmaps, you should take a look at
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ArtProvider.html#artprovider">wx.ArtProvider</a>, which is
a class used to customize the look of wxPython application.</p>
<p>When wxPython needs to display an icon or a bitmap (e.g. in the standard file dialog), it does not
use a hard-coded resource but asks <cite>wx.ArtProvider</cite> for it instead. A number of standard bitmaps are
readily available, and in particular the following:</p>
<table border="1" class="docutils">
<colgroup>
<col width="38%" />
<col width="33%" />
<col width="29%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_ERROR</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GOTO_LAST</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FILE_SAVE_AS</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_QUESTION</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_PRINT</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_DELETE</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_WARNING</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_HELP</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_COPY</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_INFORMATION</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_TIP</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_CUT</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_ADD_BOOKMARK</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_REPORT_VIEW</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_PASTE</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_DEL_BOOKMARK</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_LIST_VIEW</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_UNDO</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_HELP_SIDE_PANEL</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_NEW_DIR</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_REDO</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_HELP_SETTINGS</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FOLDER</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_PLUS</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_HELP_BOOK</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FOLDER_OPEN</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_MINUS</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_HELP_FOLDER</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GO_DIR_UP</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_CLOSE</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_HELP_PAGE</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_EXECUTABLE_FILE</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_QUIT</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GO_BACK</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_NORMAL_FILE</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FIND</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GO_FORWARD</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_TICK_MARK</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FIND_AND_REPLACE</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GO_UP</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_CROSS_MARK</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_HARDDISK</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GO_DOWN</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_MISSING_IMAGE</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FLOPPY</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GO_TO_PARENT</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_NEW</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_CDROM</span></tt></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GO_HOME</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FILE_OPEN</span></tt></li>
</ul>
</td>
<td>&nbsp;</td>
</tr>
<tr class="row-even"><td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_GOTO_FIRST</span></tt></li>
</ul>
</td>
<td><ul class="first last simple">
<li><tt class="docutils literal"><span class="pre">ART_FILE_SAVE</span></tt></li>
</ul>
</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<div class="line-block">
<div class="line"><br /></div>
</div>
<p>In order to use <cite>wx.ArtProvider</cite> and retrieve a standard bitmap, you may do something like:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">bmp</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">ArtProvider</span><span class="o">.</span><span class="n">GetBitmap</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">ART_INFORMATION</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ART_OTHER</span><span class="p">,</span> <span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">))</span>
<span class="n">static_bitmap</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">StaticBitmap</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">bmp</span><span class="p">)</span>
</pre></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ArtProvider.html#ArtProvider.GetBitmap">GetBitmap</a>
method of <cite>wx.ArtProvider</cite> and the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/StaticBitmap.html#StaticBitmap.__init__">wx.StaticBitmap</a>
constructor.</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/bitmaps.py"><img alt="_images/bitmaps.png" src="_images/bitmaps.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<ol class="arabic simple">
<li>Using the <cite>wx.ArtProvider</cite>, a <cite>wx.StaticBitmap</cite> and a <cite>wx.BoxSizer</cite>, put 4 standard bitmaps stacked horizontally</li>
<li>Can you create a sizer/widgets hierarchy for which the 4 bitmaps are always centered in the main
application window?</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
</div>
<div class="section" id="core-widgets">
<h2><a class="toc-backref" href="#id57">Core Widgets</a><a class="headerlink" href="#core-widgets" title="Permalink to this headline">¶</a></h2>
<p>We will now explore a few of the most frequently used core controls in wxPython. The actual number of
core classes (100) is way too big to explore them all in this tutorial, but this introductory overview
should get you started and whet your appetite for more...</p>
<div class="section" id="common-dialogs">
<h3><a class="toc-backref" href="#id58">Common dialogs</a><a class="headerlink" href="#common-dialogs" title="Permalink to this headline">¶</a></h3>
<p>Common dialog classes and functions encapsulate commonly-needed dialog box requirements. They are all <cite>modal</cite>,
grabbing the flow of control until the user dismisses the dialog, to make them easy to use within an application.</p>
<p>Some dialogs have both platform-dependent and platform-independent implementations, so that if underlying
windowing systems do not provide the required functionality, the generic classes and functions can stand in.
For example, under Windows, <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ColourDialog.html#colourdialog">ColourDialog</a>
uses the standard colour selector. There is also an equivalent called <cite>GenericColourDialog</cite> for other platforms.</p>
<p>wxPython wraps pretty much all the standard dialogs:</p>
<ul class="simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ColourDialog.html#colourdialog">wx.ColourDialog</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/DirDialog.html#dirdialog">wx.DirDialog</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/FileDialog.html#filedialog">wx.FileDialog</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/FontDialog.html#fontdialog">wx.FontDialog</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/PageSetupDialog.html#pagesetupdialog">wx.PageSetupDialog</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/PrintDialog.html#printdialog">wx.PrintDialog</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/MessageDialog.html#messagedialog">wx.MessageDialog</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ProgressDialog.html#progressdialog">wx.ProgressDialog</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/FindReplaceDialog.html#findreplacedialog">wx.FindReplaceDialog</a>, etc...</li>
</ul>
<div class="section" id="id14">
<h4><a class="toc-backref" href="#id59"><cite>wx.FileDialog</cite></a><a class="headerlink" href="#id14" title="Permalink to this headline">¶</a></h4>
<p><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/FileDialog.html#filedialog">wx.FileDialog</a> pops up a file selector box.
On Windows and GTK 2.4+, this is the common file selector dialog. Looking at its constructor:</p>
<dl class="method">
<dt id="FileDialog.__init__">
<tt class="descclassname">FileDialog.</tt><tt class="descname">__init__</tt><big>(</big><em>parent</em>, <em>message=u'Select a file'</em>, <em>defaultDir=''</em>, <em>defaultFile=''</em>, <em>wildcard=u'*.*'</em>, <em>style=wx.FD_DEFAULT_STYLE</em><big>)</big><a class="headerlink" href="#FileDialog.__init__" title="Permalink to this definition">¶</a></dt>
<dd><table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>parent</strong> &#8211; Parent window.</li>
<li><strong>message</strong> (<em>string</em>) &#8211; Message to show on the dialog.</li>
<li><strong>defaultDir</strong> (<em>string</em>) &#8211; The default directory, or the empty string.</li>
<li><strong>defaultFile</strong> (<em>string</em>) &#8211; The default filename, or the empty string.</li>
<li><strong>wildcard</strong> (<em>string</em>) &#8211; A wildcard, such as &#8221;.&#8221; or &#8220;BMP files (.bmp)|.bmp|GIF files (.gif)|.gif&#8221;.</li>
<li><strong>style</strong> (<em>long</em>) &#8211; A dialog style.</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<p>The path (<cite>defaultDir</cite>) and filename (<cite>defaultFile</cite>) are distinct elements of a full file pathname.</p>
<p>If <cite>defaultDir</cite> is &#8220;&#8221;, the current directory will be used. If <cite>defaultFile</cite> is &#8220;&#8221;, no default filename
will be supplied. The <cite>wildcard</cite> parameter determines what files are displayed in the file selector, and file
extension supplies a type extension for the required filename.</p>
<p>The most common <cite>style</cite> bits used are <tt class="docutils literal"><span class="pre">wx.FD_OPEN</span></tt> (for a &#8220;file open&#8221; dialog) and <tt class="docutils literal"><span class="pre">wx.FD_SAVE</span></tt>
(for a &#8220;file save&#8221; dialog).</p>
<p><cite>wx.FileDialog</cite> implements a wildcard filter. Typing a filename containing wildcards (<tt class="docutils literal"><span class="pre">*</span></tt>, <tt class="docutils literal"><span class="pre">?</span></tt>) in
the filename text item, and clicking on <tt class="docutils literal"><span class="pre">Ok</span></tt>, will result in only those files matching the pattern
being displayed.</p>
<p>The wildcard may be a specification for multiple types of file with a description for each, such as:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">wildcard</span> <span class="o">=</span> <span class="s">&quot;BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif&quot;</span>
</pre></div>
</div>
<p>As an example, to give the user the possibility to choose one Python file in a folder:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="c"># This is how you pre-establish a file filter so that the dialog</span>
<span class="c"># only shows the extension(s) you want it to.</span>
<span class="n">wildcard</span> <span class="o">=</span> <span class="s">&#39;Python source (*.py)|*.py&#39;</span>

<span class="n">dlg</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">FileDialog</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="s">&quot;Choose a Python file&quot;</span><span class="p">,</span> <span class="n">defaultDir</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span>
                    <span class="n">defaultFile</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">wildcard</span><span class="o">=</span><span class="n">wildcard</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="n">wx</span><span class="o">.</span><span class="n">FD_OPEN</span><span class="p">)</span>

<span class="c"># Show the dialog and retrieve the user response. If it is the OK response,</span>
<span class="c"># process the data.</span>
<span class="k">if</span> <span class="n">dlg</span><span class="o">.</span><span class="n">ShowModal</span><span class="p">()</span> <span class="o">==</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_OK</span><span class="p">:</span>
    <span class="c"># This returns the file that was selected</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">dlg</span><span class="o">.</span><span class="n">GetPath</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>

<span class="c"># Destroy the dialog. Don&#39;t do this until you are done with it!</span>
<span class="c"># BAD things can happen otherwise!</span>
<span class="n">dlg</span><span class="o">.</span><span class="n">Destroy</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="section" id="id16">
<h4><a class="toc-backref" href="#id60"><cite>wx.MessageDialog</cite></a><a class="headerlink" href="#id16" title="Permalink to this headline">¶</a></h4>
<p>This dialog shows a single or multi-line message, plus buttons that can be chosen from <tt class="docutils literal"><span class="pre">OK</span></tt>, <tt class="docutils literal"><span class="pre">Cancel</span></tt>, <tt class="docutils literal"><span class="pre">Yes</span></tt>,
and <tt class="docutils literal"><span class="pre">No</span></tt>. Under Windows, an optional icon can be shown, such as an exclamation mark or question mark.</p>
<p>It is mostly used as informational message window. As an example, if you want to inform the user
that some process in your GUI has finished running, you may do the following:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">dlg</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">MessageDialog</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="s">&#39;Calculations finished&#39;</span><span class="p">,</span> <span class="n">caption</span><span class="o">=</span><span class="s">&#39;Information&#39;</span><span class="p">,</span>
                       <span class="n">style</span><span class="o">=</span><span class="n">wx</span><span class="o">.</span><span class="n">OK</span> <span class="o">|</span> <span class="n">wx</span><span class="o">.</span><span class="n">ICON_INFORMATION</span><span class="p">)</span>
<span class="n">dlg</span><span class="o">.</span><span class="n">ShowModal</span><span class="p">()</span>
<span class="n">dlg</span><span class="o">.</span><span class="n">Destroy</span><span class="p">()</span>
</pre></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>For part (1), see the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Menu.html#Menu.Append">Append</a>
method of <cite>wx.Menu</cite></li>
<li>For part (3) you may need to look at the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextEntry.html#TextEntry.SetValue">SetValue</a>
method of <cite>wx.TextCtrl</cite></li>
<li>See also <a class="reference external" href="http://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files">the official Python docs on I/O</a>,
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/FileDialog.html#FileDialog.__init__">wx.FileDialog</a>
and <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/MessageDialog.html#MessageDialog.__init__">wx.MessageDialog</a>
constructors.</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/common_dialogs.py"><img alt="_images/common_dialogs.png" src="_images/common_dialogs.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/widgets.py">Widgets</a> sample:</p>
<ol class="arabic simple">
<li>Add a new &#8220;Open...&#8221; menu item in the &#8220;File&#8221; menu</li>
<li>Upon user selection of this menu, launch a <cite>wx.FileDialog</cite> to let the user choose a Python file</li>
<li>Read the Python file and set its content as text in the text control</li>
<li>Inform the user that the file has been loaded successfully via a <cite>wx.MessageDialog</cite>.</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
</div>
<div class="section" id="common-widgets">
<h3><a class="toc-backref" href="#id61">Common widgets</a><a class="headerlink" href="#common-widgets" title="Permalink to this headline">¶</a></h3>
<p>In this section we are going to explore a few of the most commonly used widgets &#8211; although not the basic
ones such as <cite>wx.ComboBox</cite> or <cite>wx.SpinCtrl</cite>.</p>
<div class="section" id="wx-notebook">
<h4><a class="toc-backref" href="#id62"><cite>wx.Notebook</cite></a><a class="headerlink" href="#wx-notebook" title="Permalink to this headline">¶</a></h4>
<div class="figure align-right">
<img alt="_images/notebook1.png" src="_images/notebook1.png" />
</div>
<p>This class represents a notebook control, which manages multiple windows with associated tabs.</p>
<p>To use the class, create a <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Notebook.html#notebook">wx.Notebook</a>
object and call <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/BookCtrlBase.html#BookCtrlBase.AddPage">AddPage</a>
or <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/BookCtrlBase.html#BookCtrlBase.InsertPage">InsertPage</a>,
passing a window to be used as the page.</p>
<p>As an example, this is how you may add a tabbed page to your notebook control:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">notebook</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Notebook</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>

<span class="c"># Create the page windows as children of the notebook</span>
<span class="n">page</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Panel</span><span class="p">(</span><span class="n">notebook</span><span class="p">)</span>

<span class="c"># Add the pages to the notebook with the label to show</span>
<span class="c"># on the tab</span>
<span class="n">notebook</span><span class="o">.</span><span class="n">AddPage</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="s">&#39;Page 1&#39;</span><span class="p">)</span>
</pre></div>
</div>
<div class="line-block">
<div class="line"><br /></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/BookCtrlBase.html#BookCtrlBase.AddPage">AddPage</a>
method of <cite>wx.Notebook</cite></li>
<li>Don&#8217;t forget that any page you add <strong>must be a child of the notebook</strong>, i.e. the notebook itself
should be the <cite>parent</cite> parameter for the widget that will become a page in the notebook</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/notebook1.py"><img alt="_images/notebook2.png" src="_images/notebook2.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/notebook.py">Notebook</a> sample:</p>
<ol class="arabic simple">
<li>Look for the <cite>OnOpen</cite> menu event handler</li>
<li>Modify the <cite>OnOpen</cite> method to create a <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TextCtrl.html#TextCtrl">wx.TextCtrl</a>
and add the text ctrl as a new page in the notebook: the text control will display the content of the
Python file selected in the <cite>OnOpen</cite> method</li>
<li>Set the notebook tab text to be the filename (without the directory information or file extension)</li>
<li>Set the notebook <cite>style</cite> to show tabs at bottom instead of at top</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
<div class="section" id="wx-splitterwindow">
<h4><a class="toc-backref" href="#id63"><cite>wx.SplitterWindow</cite></a><a class="headerlink" href="#wx-splitterwindow" title="Permalink to this headline">¶</a></h4>
<p>This widget enables to split the main area of an application into parts. The user can dynamically resize those
parts with the mouse pointer. Such a solution can be seen in mail clients or in burning software. You can split
an area vertically or horizontally.</p>
<p>As an example on how to use it:</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/splitter.py"><img alt="_images/splitter.png" src="_images/splitter.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">wx</span>

<span class="k">class</span> <span class="nc">SplitterFrame</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;wx.SplitterWindow&#39;</span><span class="p">)</span>

        <span class="n">splitter</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">SplitterWindow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">panel1</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Panel</span><span class="p">(</span><span class="n">splitter</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">static</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">StaticText</span><span class="p">(</span><span class="n">panel1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Hello World&#39;</span><span class="p">,</span> <span class="n">pos</span><span class="o">=</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
        <span class="n">panel1</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">LIGHT_GREY</span><span class="p">)</span>

        <span class="n">panel2</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Panel</span><span class="p">(</span><span class="n">splitter</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">panel2</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">WHITE</span><span class="p">)</span>

        <span class="n">splitter</span><span class="o">.</span><span class="n">SplitVertically</span><span class="p">(</span><span class="n">panel1</span><span class="p">,</span> <span class="n">panel2</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Centre</span><span class="p">()</span>
</pre></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/SplitterWindow.html#SplitterWindow.__init__">SplitterWindow</a>
constructor and its <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/SplitterWindow.html#styles-window-styles">window styles</a></li>
<li>You may want to use different background colours for the split windows to make them more visible</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/splitter1.py"><img alt="_images/splitter1.png" src="_images/splitter1.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/splitter.py">Splitter</a> sample:</p>
<ol class="arabic simple">
<li>Modify it to make a &#8220;split-split&#8221; window, i.e., a window split vertically which contains
2 windows split horizontally.</li>
<li>Looking at the <cite>wx.SplitterWindow</cite> window styles, can you make their sash to update &#8220;live&#8221;?</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
<div class="section" id="wx-treectrl">
<h4><a class="toc-backref" href="#id64"><cite>wx.TreeCtrl</cite></a><a class="headerlink" href="#wx-treectrl" title="Permalink to this headline">¶</a></h4>
<p>A tree control presents information as a hierarchy, with items that may be expanded to show further items.
It is implemented natively on Windows and it uses a generic implementation on GTK and Mac OS, although
newer versions of wxPython (the 2.9 ones) provide a native implementation in
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/dataview.DataViewTreeCtrl.html#dataview-dataviewtreectrl">DataViewTreeCtrl</a>.</p>
<p>There is also a pure-Python implementation (with many more functionalities) in <cite>wx.lib</cite>, termed
<a class="reference external" href="http://wxpython.org/Phoenix/docs/html/lib.agw.customtreectrl.CustomTreeCtrl.html#lib.agw.customtreectrl.CustomTreeCtrl">CustomTreeCtrl</a>.</p>
<p>A simple application showing the usage of <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TreeCtrl.html#treectrl">wx.TreeCtrl</a>
is as follows:</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/treectrl.py"><img alt="_images/treectrl.png" src="_images/treectrl.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">wx</span>

<span class="k">class</span> <span class="nc">TreeFrame</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;wx.TreeCtrl&#39;</span><span class="p">)</span>

        <span class="n">tree_ctrl</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">TreeCtrl</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="n">wx</span><span class="o">.</span><span class="n">TR_DEFAULT_STYLE</span><span class="p">)</span>

        <span class="c"># Add the tree root</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">tree_ctrl</span><span class="o">.</span><span class="n">AddRoot</span><span class="p">(</span><span class="s">&#39;Root item&#39;</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
            <span class="n">tree_ctrl</span><span class="o">.</span><span class="n">AppendItem</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">&#39;Item </span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>

        <span class="n">tree_ctrl</span><span class="o">.</span><span class="n">ExpandAll</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Centre</span><span class="p">()</span>
</pre></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TreeCtrl.html#TreeCtrl.__init__">TreeCtrl</a>
constructor and its <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/TreeCtrl.html#styles-window-styles">window styles</a></li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/treectrl1.py"><img alt="_images/treectrl1.png" src="_images/treectrl1.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Using the <a class="reference external" href="scripts/treectrl.py">TreeCtrl</a> sample and the Python
<a class="reference external" href="http://docs.python.org/2/library/keyword.html">keyword module</a>:</p>
<ol class="arabic simple">
<li>Classify the Python keywords alphabetically, using the first letter of the keyword
(i.e., <tt class="docutils literal"><span class="pre">and</span></tt> goes into <tt class="docutils literal"><span class="pre">a</span></tt>, <tt class="docutils literal"><span class="pre">for</span></tt> goes into <tt class="docutils literal"><span class="pre">f</span></tt> and so on):<ul>
<li>For each letter, add a child to the treectrl root</li>
<li>In each child of the root item, add its corresponding keyword(s)</li>
</ul>
</li>
<li>Looking at the <cite>wx.TreeCtrl</cite> window styles, can you make the selection highlight extend over
the entire horizontal row of the tree control window? How do you make the selection editable?</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
</div>
</div>
<div class="section" id="creating-custom-controls-basics">
<h2><a class="toc-backref" href="#id65">Creating Custom Controls - Basics</a><a class="headerlink" href="#creating-custom-controls-basics" title="Permalink to this headline">¶</a></h2>
<p>In this section, we are going to look at few generalities about custom controls and how to draw
custom objects on some wxPython windows. Unfortunately the entire &#8220;owner-draw&#8221; subject is way too
big to be covered during a short tutorial, but this section should at least get you started and
whet your appetite for more.</p>
<p><strong>(If you want to hear more details, please feel free to contact me at any time during the PythonBrasil8
conference).</strong></p>
<div class="section" id="device-contexts-and-paint-events">
<h3><a class="toc-backref" href="#id66">Device contexts and paint events</a><a class="headerlink" href="#device-contexts-and-paint-events" title="Permalink to this headline">¶</a></h3>
<p>A DC is a <cite>device context</cite> onto which graphics and text can be drawn. It is intended to represent
different output devices and offers a common abstract API for drawing on any of them.</p>
<p>DCs have many drawing primitives:</p>
<ul class="simple">
<li>DrawBitmap, DrawEllipse, DrawLine, DrawLines, DrawPoint, DrawPolygon, DrawRectangle, DrawRoundedRectangle,
DrawSpline, DrawText, etc...</li>
</ul>
<p>And they work with GDI objects:</p>
<ul class="simple">
<li>wx.Font, wx.Bitmap, wx.Brush, wx.Pen, wx.Mask, wx.Icon, etc...</li>
</ul>
<p>Some device contexts are created temporarily in order to draw on a window. This is true for some of
the device contexts available for wxPython:</p>
<ul class="simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ScreenDC.html#screendc">ScreenDC</a>: Use this to paint on
the screen, as opposed to an individual window.</li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/ClientDC.html#clientdc">ClientDC</a>: Use this to paint on
the client area of window (the part without borders and other decorations), but do not use it
from within an <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/PaintEvent.html#paintevent">PaintEvent</a>.</li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/PaintDC.html#paintdc">PaintDC</a>: Use this to paint on the
client area of a window, but only from within a <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/PaintEvent.html#paintevent">PaintEvent</a>.</li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/WindowDC.html#windowdc">WindowDC</a>: Use this to paint on
the whole area of a window, including decorations. This may not be available on non-Windows platforms.</li>
</ul>
<p>Let&#8217;s focus on the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/PaintDC.html#paintdc">PaintDC</a>, which is
one of the most commonly used. To use this device context, we want to bind a paint event for a window
to an event handler, which will be responsible for drawing (almost) anything we want onto our window:</p>
<div class="admonition-documentation-documentation admonition">
<p class="first admonition-title"><img alt="documentation" class="align-top" src="_images/documentation.png" style="width: 32px;" /> Documentation</p>
<ul class="last simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/DC.html#dc">wx.DC documentation</a></li>
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/PaintEvent.html#paintevent">wx.PaintEvent documentation</a></li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/paint_events.py"><img alt="_images/paint_events.png" src="_images/paint_events.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>

        <span class="n">wx</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)</span>

        <span class="c"># Bind a &quot;paint&quot; event for the frame to the</span>
        <span class="c"># &quot;OnPaint&quot; method</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_PAINT</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">OnPaint</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Show</span><span class="p">()</span>


    <span class="k">def</span> <span class="nf">OnPaint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>

        <span class="n">dc</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">PaintDC</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

        <span class="c"># Set a red brush to draw a rectangle</span>
        <span class="n">dc</span><span class="o">.</span><span class="n">SetBrush</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">RED_BRUSH</span><span class="p">)</span>
        <span class="n">dc</span><span class="o">.</span><span class="n">DrawRectangle</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</pre></div>
</div>
<p>The <cite>PaintEvent</cite> is triggered every time the window is redrawn, so we can be sure that our red rectangle will
always be drawn when the operating system wants to &#8220;refresh&#8221; the content of our window.</p>
<div class="line-block">
<div class="line"><br /></div>
</div>
<p>Similar things can be done using other graphical primitives, like <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/DC.html#DC.DrawPoint">DrawPoint</a>:</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/paint_events2.py"><img alt="_images/paint_events2.png" src="_images/paint_events2.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">OnPaint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>

    <span class="n">dc</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">PaintDC</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="c"># Use a red pen to draw the points</span>
    <span class="n">dc</span><span class="o">.</span><span class="n">SetPen</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Pen</span><span class="p">(</span><span class="s">&#39;RED&#39;</span><span class="p">))</span>

    <span class="c"># Get the size of the area inside the main window</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">GetClientSize</span><span class="p">()</span>
    <span class="c"># Draw a sequence of points along the mid line</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="mi">3</span><span class="p">):</span>
        <span class="n">dc</span><span class="o">.</span><span class="n">DrawPoint</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</pre></div>
</div>
<div class="line-block">
<div class="line"><br /></div>
</div>
<div class="admonition-documentation-documentation admonition">
<p class="first admonition-title"><img alt="documentation" class="align-top" src="_images/documentation.png" style="width: 32px;" /> Documentation</p>
<ul class="last simple">
<li><a class="reference external" href="http://wxpython.org/Phoenix/docs/html/Font.html#font">wx.Font documentation</a></li>
</ul>
</div>
<p>Or drawing text strings onto our window by using <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/DC.html#DC.DrawText">DrawText</a>:</p>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/paint_events3.py"><img alt="_images/paint_events3.png" src="_images/paint_events3.png" /></a>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">OnPaint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>

    <span class="n">dc</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">PaintDC</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="c"># Use a big font for the text...</span>
    <span class="n">font</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Font</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">SWISS</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">NORMAL</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">BOLD</span><span class="p">)</span>
    <span class="c"># Inform the DC we want to use that font</span>
    <span class="n">dc</span><span class="o">.</span><span class="n">SetFont</span><span class="p">(</span><span class="n">font</span><span class="p">)</span>

    <span class="c"># Draw our text onto the DC</span>
    <span class="n">dc</span><span class="o">.</span><span class="n">DrawText</span><span class="p">(</span><span class="s">&#39;Hello World&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
</div>
<div class="line-block">
<div class="line"><br /></div>
</div>
<div class="admonition-hint-hints admonition">
<p class="first admonition-title"><img alt="hint" class="align-top" src="_images/hint.png" style="width: 32px;" /> Hints</p>
<ul class="last simple">
<li>See the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/DC.html#DC.DrawLine">DrawLine</a>,
the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/DC.html#DC.DrawText">DrawText</a> and
the <a class="reference external" href="http://wxpython.org/Phoenix/docs/html/DC.html#DC.GetFullTextExtent">GetFullTextExtent</a>
methods.</li>
</ul>
</div>
<div class="figure align-right">
<a class="reference external image-reference" href="scripts/dc1.py"><img alt="_images/dc1.png" src="_images/dc1.png" /></a>
</div>
<div class="green topic">
<p class="topic-title first"><img alt="exercise" class="align-top" src="_images/exercise.png" style="width: 32px;" /> Exercises</p>
<p>Modify the <a class="reference external" href="scripts/dc.py">DC</a> sample such that:</p>
<ol class="arabic simple">
<li>Using the <a class="reference external" href="http://docs.python.org/2/library/random.html">random module</a>, draw
a number (let&#8217;s say 100) of random lines inside the <cite>wx.Frame</cite> client area.</li>
<li>Looking at the previous snippets of code which uses <cite>DrawText</cite>, and using the <cite>width</cite>
and <cite>height</cite> returned by the <cite>DC.GetFullTextExtent</cite> method, can you draw a string
centered in the frame client area?</li>
</ol>
<p>Click on the figure for the solution.</p>
</div>
</div>
<div class="section" id="additional-resources-and-tutorials">
<h3><a class="toc-backref" href="#id67">Additional resources and tutorials</a><a class="headerlink" href="#additional-resources-and-tutorials" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>The <a class="reference external" href="http://zetcode.com/wxpython/gdi/">ZetCode tutorial on drawing</a></li>
<li>Creating custom control with wxPython <a class="reference external" href="http://wiki.wxpython.org/CreatingCustomControls">Wiki page</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
        &copy; Copyright 2012, Andrea Gavana.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.1.3.
    </div>
  </body>
</html>